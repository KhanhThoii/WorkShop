[
{
	"uri": "http://localhost:1313/vi/",
	"title": "Deploying FCJ Management Application with Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Triển khai ứng dụng FCJ Management với Auto Scaling Group Tổng quan Trong hướng dẫn này, chúng ta sẽ triển khai ứng dụng với Auto Scaling Group nhằm đảm bảo khả năng mở rộng linh hoạt, đáp ứng kịp thời nhu cầu truy cập của người dùng. Đồng thời, chúng ta sẽ tích hợp Load Balancer để phân phối lưu lượng và điều phối các yêu cầu từ người dùng đến tầng ứng dụng (Application Tier), giúp tối ưu hiệu suất và đảm bảo tính sẵn sàng của hệ thống.\nTrước khi bắt đầu, hãy chắc chắn bạn đã tham khảo tài liệu về cách triển khai Ứng dụng FCJ Management trên máy ảo Windows hoặc Amazon Linux để nắm rõ các bước thiết lập trên máy ảo. Chúng ta sẽ sử dụng các máy ảo FCJ Management đã được triển khai để thực hiện mở rộng quy mô tự động và đồng loạt trong Auto Scaling Group.\nNội dung Giới thiệu Các bước chuẩn bị Khởi tạo Template Thiết lập Load Balancer Kiểm thử Khởi tạo Auto Scaling Group Kiểm thử giải pháp manual scaling Dọn dẹp tài nguyên "
},
{
	"uri": "http://localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Trong bối cảnh công nghệ thông tin hiện nay, việc quản lý hiệu quả tài nguyên hệ thống và đảm bảo độ ổn định của dịch vụ là yêu cầu thiết yếu đối với các doanh nghiệp. Khi số lượng người dùng truy cập ngày càng gia tăng, việc đảm bảo hiệu suất hệ thống luôn ổn định trở thành thách thức lớn. Do đó, đề tài “Triển khai hệ thống Workload Management bằng AWS” sẽ tập trung vào việc xây dựng một hệ thống quản lý tài nguyên linh hoạt và hiệu quả, tận dụng các công cụ và dịch vụ mạnh mẽ của AWS như Auto Scaling, Load Balancer và CloudWatch.\nAuto Scaling Group Auto Scaling Group là gì và Tại sao cần sử dụng Auto scaling group ?\nAuto Scaling Group (ASG) là một dịch vụ của Amazon Web Services (AWS) giúp tự động điều chỉnh số lượng máy chủ (instances) dựa trên nhu cầu thực tế của ứng dụng. Khi lưu lượng truy cập hoặc nhu cầu sử dụng tăng lên, ASG có thể tự động tạo thêm máy chủ mới để đảm bảo hiệu suất ổn định. Ngược lại, khi lưu lượng giảm, ASG sẽ giảm số lượng máy chủ để tiết kiệm chi phí.\nCác lợi ích chính của Auto Scaling Group:\nKhả năng mở rộng tự động: Tăng hoặc giảm số lượng máy chủ dựa trên các điều kiện được thiết lập, ví dụ như mức độ CPU sử dụng, bộ nhớ, hoặc số lượng yêu cầu.\nTối ưu chi phí: Tự động tắt máy chủ không cần thiết khi nhu cầu giảm, giúp tiết kiệm tài nguyên.\nĐảm bảo tính sẵn sàng: Duy trì một số lượng máy chủ tối thiểu để đảm bảo hệ thống luôn hoạt động, ngay cả khi một số máy chủ gặp sự cố.\nElastic Load Balancer Elastic Load Balancer (ELB) là một dịch vụ của Amazon Web Services (AWS) dùng để phân phối tự động lưu lượng truy cập đến nhiều máy chủ (instances) trong một hoặc nhiều vùng sẵn sàng (Availability Zones). ELB giúp đảm bảo rằng các yêu cầu truy cập được phân bổ đồng đều, tránh tình trạng quá tải ở một máy chủ, từ đó tối ưu hóa hiệu suất và tăng tính sẵn sàng của ứng dụng.\nLaunch Template Launch Template là một công cụ trong Amazon Web Services (AWS) giúp đơn giản hóa và tự động hóa việc khởi tạo các máy chủ ảo (EC2 instances) bằng cách lưu trữ các cấu hình khởi tạo. Khi bạn sử dụng Launch Template, bạn không cần cấu hình thủ công mỗi khi tạo instance mới, giúp tiết kiệm thời gian và đảm bảo tính nhất quán.\nTarget Group Target Group là một thành phần của Elastic Load Balancer (ELB), dùng để xác định và quản lý các EC2 instances mà Load Balancer sẽ phân phối lưu lượng truy cập đến.\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Chúng ta cần chuẩn bị một số dịch vụ để có thể tiến hành triển khai ứng dụng FCJ Management sử dụng Auto Scaling Group cùng với Elastic Load Balancer. Một cách tổng quan, chúng ta sẽ triển khai ứng dụng FCJ Management theo kiến trúc như sau:\nNội dung Thiết lập hạ tầng mạng Khởi tạo EC2 Instance Khởi tạo Database Instance với RDS Cài đặt dữ liệu cho Database Triển khai máy chủ web Chuẩn bị các metric cho Predictive scaling "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.1-setup-network-infrastructure/",
	"title": "Thiết lập hạ tầng mạng",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Truy cập vào AWS Management Console\nTìm VPC Chọn VPC Trong giao diện VPC\nchọn Create VPC Trong giao diện Create VPC\nChọn VPC and more Name, nhập tên VPC của bạn. Trong bài lab này, ta đặt tên là WorkShop IPv4 CIDR block, nhập 10.0.0.0/16 Chọn như sau:\nSố lượng AZ là 3\nSố lượng public subnet là 3\nSố lượng private subnet là 3\nNat gateways chọn None\nVPC endpoints chọn None\nChọn Create VPC\nThực hiện cấp phát IP public. Thực hiện cấp phát IP public.\nChọn Subnets\nChọn public subnet\nChọn Edit subnet settings\nChọn Enable auto-assign public IPv4 address. Sau đó Chọn Save\nKiểm tra đã cấp phát thành công.\nThực hiện cấp phát cho Public subnet còn lại (làm tương tự). Tiếp theo chúng ta sẽ tạo Security group cho ứng dụng.\nTrong giao diện VPC, chọn Security groups\nChọn Create security group\nThực hiện cấu hình Security Group\nSecurity group name, nhập FCJ-Management-SG\nDescription, nhập Security Group for FCJ Management\nVPC, thì chọn VPC vừa tạo: WorkShop\nCấu hình Inbound rules\nĐầu tiên phải cấu hình SSH port 22 và Source: MyIP để có thể truy cập vào instance.\nTiếp theo là HTTP port 80.\nCustom TCP port 5000 dành cho FCJ Management\nHTTPS port 443.\nKiểm tra Outbound rules và chọn Create security group\nTạo Security group cho Database instance Chúng ta tạo Security group cho Database instance. Để đảm bảo bảo mật nên không cấu hình chung Security group của ứng dụng. Cấu hình security group\nSecurity Group name, nhập FCJ-Management-DB-SG Description, nhập Security Group for DB instance Chọn vpc vừa tạo Cấu hình Inbound rules Chọn Add rule\nChọn MYSQL/Aurora port 3306\nSau đó chọn Source là FCJ-Management-SG\nKiểm tra lại Outbound rules và cuối cùng bấm Create security group\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.2-launch-ec2-instance/",
	"title": "Khởi tạo EC2 Instance",
	"tags": [],
	"description": "",
	"content": "Truy cập vào AWS Management Console\nTìm EC2 Chọn EC2 Trong giao diện EC2\nchọn Launch instances Đặt tên cho instance, nhập FCJ-Management\nChọn như sau:\nChọn Quick Start\nChọn Amazon Linux\nChọn Amazon Linux 2023 AMI\nChọn Instance type:\nChọn t2.micro Chọn Create new key pair Cấu hình key pair\nĐặt tên là fcj-key\nKey pair type: RSA\nPrivate key format: .pem\nBấm Create key pair\nThực hiện cấu hình Network:\nBấm vào nút Edit\nVPC, chọn VPC đã tạo.\nSubnet, chọn Public subnet\nKiểm tra đã Auto-assign public IP chưa? Nếu chưa, xem lại bước cấp phát public IP ở bước tạo VPC.\nChọn Select existing security group rồi chọn FCJ-Management-SG.\nChọn Launch instance.\nKhởi tạo instance thành công.\n"
},
{
	"uri": "http://localhost:1313/vi/3-create-launch-template/",
	"title": "Tạo Launch Template",
	"tags": [],
	"description": "",
	"content": "AMIs và Launch Template AMIs (Amazon Machine Images) lưu giữ các thông tin quan trọng như hệ điều hành, ứng dụng và cấu hình của một EC2. Khi tạo AMI, bạn đảm bảo rằng mỗi máy chủ mới được khởi tạo sẽ có cùng cấu hình và sẵn sàng hoạt động ngay lập tức.\nLaunch Template là công cụ dùng để định cấu hình cho các phiên bản EC2 mới, bao gồm việc chọn AMI, loại instance, cấu hình mạng và tùy chọn bảo mật. Khi cần khởi tạo một hoặc nhiều máy chủ với cấu hình giống nhau, chỉ cần sử dụng Launch Template đã được thiết lập sẵn để triển khai một cách dễ dàng và nhanh chóng.\nThiết lập Launch Templates Tạo Amazon Machine Images (AMIs) từ EC2 Ở trong phần giao diện quản lý EC2, ở bảng chọn bên phải\nChọn Instances\nChọn FCJ-Management instance\nChọn Actions\nChọn Image and templates\nẤn Create image\nTrong bảng cấu hình cho Create AMI, chúng ta tiến hành điền các thông tin sau\nImage name FCJ-Management-AMI\nImage description AMI for FCJ-Management\nẤn Create Image\nSau khi tạo AMI chúng ta sẽ kiểm tra AMI vừa tạo\nChọn AMIs chúng ta sẽ thấy AMI vừa tạo được\nChọn FCJ-Management-AMI\nTạo Launch Templates Ở giao diện quản lý EC2, ở bảng chọn bên phải\nChọn Launch Templates Chọn Create launch template Ở trong bảng Create launch template hãy điền các thông tin sau\nỞ phần Launch template name and description\nLaunch template name FCJ-Management-template\nTemplate version description Template for FCJ Management\nỞ phần Application and OS Image (Amazon Machine Image)\nChọn My AMIs\nChọn Owned by me\nChọn loại Amazon Machine Image (AMI), chọn AMI đã tạo FCJ-Management-AMI\nỞ phần Instance type\nChọn loại Instance t2.micro Ở phần Key pair (logic)\nChọn Key pair name có tên là fcj-key Network settings\nChọn subnet public AutoScaling-Lab-public-ap-southeast-1a Chọn Select existing security group Chọn security group FCJ-Management-SG Cuối cùng, chọn Create launch template Kết quả Kiểm tra Launch Template vừa tạo\nChọn FCJ-Management-template\nXem lại cấu hình Launch Template chúng ta đã tạo\nHoàn thành tạo Launch Template.\n"
},
{
	"uri": "http://localhost:1313/vi/4-setting-up-load-balancer/4.1-t%E1%BA%A1o-target-group/",
	"title": "Tạo Target Group",
	"tags": [],
	"description": "",
	"content": "Tạo Target Group Ở giao diện EC2, ở bảng điều khiển bên trái\nChọn Target Group Nhấn vào nút Create target group Xuất hiện bảng Specify group details\nỞ phần Basic configuration Choose a target types Instances Target group name FCJ-Management-TG Trong phần Basic configuration Protocol : port HTTP, 5000 IP address IPv4 VPC WorkShop Protocol version HTTP1 Nhấn Next\nTiếp theo chúng ta tiến hành Register target\nỞ phần Available instance\nChọn targer group FCJ-Management-TG Ports for the seleced instances 5000 Chọn Include as pending below Ở phần Review targets\nTa sẽ thấy target group đã được đăng ký trước đó Chọn Create target group Kết quả Hoàn thành việc tạo Target Group, chọn Target Group FCJ-Management-TG vừa khởi tạo để xem thông tin.\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.3-launch-a-database-instance-with-rds/",
	"title": "Khởi tạo Database Instance với RDS",
	"tags": [],
	"description": "",
	"content": "Tạo Subnet group cho Database instance Truy cập vào AWS Management Console\nTìm RDS Chọn RDS Chọn Subnet groups Chọn Create DB subnet group Trong giao diện Create DB subnet group\nName, nhập FCJ-Management-Subnet-Group Description, nhập Subnet Group for FCJ Management Chọn VPC đã tạo. Cấu hình subnet\nChọn các AZ\nChọn các Private subnet\nChọn Create\nHoàn thành tạo DB Subnet Group với 2 AZ\nTạo Database instance Truy cập vào RDS AWS Management Console\nChọn Databases\nChọn Create database\nChọn phương thức tạo Databases như sau:\nChọn Standard create\nEngine database chọn MySQL\nTemplate\nChọn Production\nChọn Mutil-AZ DB instance\nThực hiện cài đặt chi tiết\nDB instance identifier, nhập fcj-management-db-instance\nMaster username, nhập admin\nChọn sang Self managed\nMaster password, nhập tùy ý của bạn (nhập 06022003Min*) - Confirm password, nhập lại password 1 lần nữa\nCấu hình chi tiết cho instace\nChọn db.m5d.large Chọn General Purpose SSD (gp3) Allocated storage nhập vào 20\nConnectivity cho db instance\nChọn Don’t connect to an EC2 compute resouce\nVPC, chọn WorkShop đã tạo\nSubnet group, chọn subnet group đã tạo.\nVPC security group, Chọn Choose existing\nSecurity Group, chọn FCJ-Management-DB-SG\nKhởi tạo Initial Database với tên awsfcjuser, còn lại để mặc định.\nChọn Create database\nChờ một vài phút để Database instance được khởi tạo\nChúng ta có được Endpoint và Port như dưới đây.\n"
},
{
	"uri": "http://localhost:1313/vi/4-setting-up-load-balancer/4.2-t%E1%BA%A1o-target-group/",
	"title": "Tạo Load Balancer",
	"tags": [],
	"description": "",
	"content": "Tạo Load Balancer Ở giao diện EC2, ở bảng điều khiển bên trái\nChọn Load Balancers Nhấn vào nút Create Load Balancer Xuất hiện bảng Compare and select load balancer type\nỞ phần Load balancer types Ở phần Application Load Balancer Chọn Create Chúng ta sẽ thấy xuất hiện bảng Create Application Load Balancer\nỞ phần Basic configuration Load balancer name FCJ-Management-LB Scheme Internet-facing Load balancer IP address type IPv4 Ở phần Network mapping\nChọn VPC AutoScaling-Lab\nChọn Subnet Public ap-southeast-1a, ap-southeast-1b, ap-southeast-1c. Lưu ý chọn public subnet\nỞ phần Security groups\nSecurity groups FCJ-Management-SG Ở phần Listeners and routing\nDefault action FCJ-Management-TG Nhấn vào nút Create Balancer\nKết quả Sau khi tạo Load Balancer chúng ta chọn FCJ-Management-LB để xem thông tin\nChọn Resource map - new để xem tổng quan liên kết của Load Balancer\n"
},
{
	"uri": "http://localhost:1313/vi/4-setting-up-load-balancer/",
	"title": "Thiết lập Load Balancer",
	"tags": [],
	"description": "",
	"content": "Load Balancer Load Balancer đóng vai trò quan trọng trong việc đảm bảo tính khả dụng và khả năng mở rộng cho ứng dụng của bạn. Nó phân phối lưu lượng truy cập đồng đều đến nhiều mục tiêu, như các phiên bản EC2, container, hoặc địa chỉ IP. Nhờ vậy, hệ thống không chỉ tận dụng tài nguyên hiệu quả mà còn nâng cao hiệu suất và tăng cường khả năng chịu lỗi, giúp ứng dụng hoạt động ổn định và đáp ứng tốt nhu cầu của người dùng.\nNội dung Tạo Target Group Tạo Load Balancer "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.4-setup-data-for-database/",
	"title": "Cài đặt dữ liệu cho Database",
	"tags": [],
	"description": "",
	"content": "Lấy Public IP address của EC2 instance\nSử dụng MobaXterm để kết nối SSH vào instance qua port 22.\nChọn Session Chọn SSH Remote host, nhập Public IPv4 address mới lấy của instance Specify username, nhập ec2-user Kiểm tra port 22 Chọn Advanced SSH settings Chọn Use private key và chọn keypair của instance. Chọn OK SSH thành công\nVì chúng ta sử dụng git để clone source code. Trước tiên, cài đặt git bằng lệnh sau:\nsudo yum install git Cài đặt MySQL command-line client\nsudo dnf install mariadb105 Kiểm tra cài đặt git\nmysql --version Kết nối MySQL command-line client (unencrypted)\nĐối với tham số -h, hãy thay thế DNS name (endpoint) cho DB instance, bạn có thể lấy DNS name ở trong console chi tiết của RDS bạn đã tạo - Đối với tham số -P, hãy thay thế port cho DB instance. (3306)\nĐối với tham số -u, thay bằng master user lúc bạn tạo RDS\nSau khi chạy lệnh thì nhập vào master user password mà bạn đã đặt khi tạo RDS\nsửa ở đây nha Tiến hành kiểm tra các database trong instance bằng lệnh sau sẽ in ra danh sách tất cả các cơ sở dữ liệu.\nshow databases; Chọn cơ sở dữ liệu để thực hiện các thay đổi đối với nó bằng cách sử dụng USE, hãy dùng initial database lúc bạn tạo RDS.\nUSE \u0026#34;tên database\u0026#34;; Thực hiện tạo bảng trong database awsuser bằng lệnh CREATE TABLE.\ntạo table ở đây nha Chèn thông tin vào trong bảng dữ liệu bằng lệnh INSERT INTO\ninsert ở đây nha Hiển thị các bảng:\nSELECT * FROM \u0026#34;tên bảng\u0026#34;; Sử dụng exit đề rời khỏi. Nếu không thể ngắt kết nối với DB instance\n"
},
{
	"uri": "http://localhost:1313/vi/5-test/",
	"title": "Kiểm tra kết quả",
	"tags": [],
	"description": "",
	"content": "Kiểm tra kết quả Sau khi triển khai xong Load Balancer, thì chúng ta sẽ lấy DNS name của LB này và dán vào trong trình duyệt để thử kết quả của triển khai.\n"
},
{
	"uri": "http://localhost:1313/vi/6-create-auto-scaling-group/",
	"title": "Tạo Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Vấn đề ở phần trước Như ta đã kiểm thử ở phần trước thì website của chúng ta đã hoạt động bình thường với một số lượt request tới sẽ ra sao nếu chúng ta gửi rất rất nhiều lượt request cùng một lúc, lúc đó website cuar chúng ta sẽ không còn hoạt động ổn định được nữa và giải pháp là chúng ta sẽ phải tăng thêm nhiều EC2 Instance ở trong hệ thống và nhờ vào Load Balancer để chia sẻ các yêu cầu từ phía người dùng.\nTuy nhiên chúng ta cứ ngồi canh và thêm các máy chủ EC2 thì không được hợp lý bởi vì để khởi tạo một EC2 Instance, thì mình cần phải có được cái “lõi” ở bên trong, chính là ứng dụng đang đảm nhận nhiệm vụ xử lý các yêu cầu đó và cùng với các thư viện khác.\nThiết lập Auto Scaling Group Thiết lập Launch template Ở trong giao diện quản lý của EC2, kéo bảng lựa chọn ở bên trái xuống cuối cùng.\nChọn Auto Scaling Groups.\nẤn Create Auto Scaling group.\nỞ trong giao diện tạo Auto Scaling group, chúng ta sẽ điền các thông tin sau\nName: FCJ-Management-ASG\nTrong Launch template:\nLaunch template: chọn FCJ-Management-template (có thể là bất kỳ cái tên nào). Version: Default (1) theo như lựa chọn mặc định. Lưu ý là tên của ASG bạn nên đặt đúng với tên của ASG mà được đặt ở trong phần 2.6 trước đó, bước chuẩn bị dữ liệu cho Predictive Scaling.\nLaunch template được chọn cho ASG phải là template mà được cài đặt đầy đủ MySQL Client, Node, Source Code và PM2 thì mới đảm bảo các Target hoạt động bình thường, nếu như bạn làm theo các bướcr trong phần 2 và phần 3 thì bạn đã làm đúng.\nThiết lập mạng Ở trong phần Network, chọn các thông tin như sau:\nVPC: chọn VPC WorkShop, VPC mà chúng ta đã tạo ở đầu bài. Availability Zones and subnets: chọn 3 public subnets mà chúng ta đã tạo. Ấn Next. Thiết lập Load Balancer và một số thứ khác Ở buớc 4 thì chúng ta đã có tạo Application Load Balancer và tạo một Target Group và gắn vào trong bộ cân bằng tải đó. Nên giờ chúng ta sẽ chọn một số lựa chọn như sau:\nLoad balancing: chọn Attach to an existing load balancer. Attach to an existing load balancer: chọn Choose from your load balancer target group Existing load balancer target group: chọn FCJ-Management-TG | HTTP. Khi cấu hình đúng Target Group và Application Load Balancer, thì ở lựa chọn Existing load balancer target group chúng ta có thể thấy được Target Group đó được liệt kê, nghĩa là cả ALB và TG đều tồn tại.\nTrong phần VPC Lattice integration options: chọn No VPC Lattice service, trong bài này thì chúng ta không cấu hình phần này.\nTiếp theo là Health checks, chúng ta sẽ chọn (tích) Turn on Elastic Load Balancing health checks. Để các thiết lập còn lại theo mặc định.\nAdditional settings, ở phần Monitoring:\nChọn (tích) Enable group metrics collection within CloudWatch.\nẤn Next.\nThiết lập Size và Scaling cho Group Ở trong phần này thì mình sẽ xác định các hành vi mở rộng của Group và số lượng các Instance sẽ được khởi tạo trong quá trình Scale, bao gồm Scale out (mở rộng) và Scale in (thu hẹp).\nTrong phần Group size:\nDesired capacity: 1 Trong phần Scaling:\nScaling limits: Min desired capacity: 1 Max desired capacity: 3 (tùy thuộc vào số lượng máy chủ bạn muốn) Trong Automatic scaling - optional: chọn No scaling policies, tạm thời làm mình sẽ không thiết lập chính sách scaling cho ASG.\nTrong Instance maintenace policy: chọn No policy, sau đó ấn next.\nThiết lập thông báo Chúng ta sẽ thiết lập thông báo tới email (dùng Amazon SNS) khi mà ASG:\nKhởi tạo một Instance mới. Hủy một Instance. Thất bại khi khởi tạo Instance. Thất bại khi hủy một instance. Chúng ta sẽ chỉ tạo thông báo tới một email duy nhất, bao gồm các thông tin:\nSend a notification to: asg-topic. Mình sẽ chọn một topic để gửi.\nWith these recipients: nhập email mà bạn muốn SNS gửi tới.\nEvent types: chọn tất cả.\nẤn Next.\nXác nhận lại các thông tin và Create Auto Scaling group.\nKết quả Kiểm tra và đăng ký nhận email từ topic.\nVào trong tab Activity của ASG FCJ-Management-ASG để kiểm tra\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.5-deploy-web-server/",
	"title": "Triển khai máy chủ web",
	"tags": [],
	"description": "",
	"content": "Cài đặt node version manager (nvm)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash Sử dụng nvm để cài đặt Node.js bằng cách nhập nội dung sau vào dòng lệnh.\nnvm install 20 clone repository code ứng dụng\ngit clone https://github.com/First-Cloud-Journey/000004-EC2.git Đến thư mục của bài lab\ncd 000004-EC2 Xem các thư mục có trong web và Sử dụng npm init khởi tạo project sẽ tạo ra file package.json mẫu.\nls npm i Cài đặt pm2 trong Global, PM2 được sử dụng để quản lý và giám sát các ứng dụng Node.js đang chạy. Nó cho phép các ứng dụng chạy dưới nền. Kiểm tra phiên bản\nnpm install -g pm2 pm2 --version chúng ta định nghĩa lại câu script để chạy ứng dụng, chúng ta sẽ dùng vim để mở file pakage.json, trong phần scripts ở key start, gán cho nó value sau, điều này sẽ giúp ứng dụng của chúng ta chạy nền:\npm2 start app.js Tiếp tục dùng vim để vào file .env, sau đó nhập vào nội dung sau để thiết lập kết nối tới database.\nDB_HOST=\u0026#39;db_host của bạn\u0026#39; DB_NAME=\u0026#39;awsfcjuser\u0026#39; DB_USER=\u0026#39;admin\u0026#39; DB_PASS=\u0026#39;mật khẩu tạo ở bước 2.3\u0026#39; Tiến hành khởi chạy ứng dụng:\nnpm start Tiếp theo, chúng ta cần lấy được public DNS của instance để có thể truy cập được ứng dụng từ trình duyệt.\nỨng dụng đã hoạt động\nTiếp theo chúng ta dùng câu lệnh pm2 startup để tiến hành cấu hình PM2 tự động khởi động lại các ứng dụng khi máy chủ khởi động lại. Nó sẽ yêu cầu thiết lập Startup Script, hãy copy/paste command đó và chạy.\nChạy lệnh pm2 save để lưu trạng thái hiện tại của các tiến trình vào danh sách khởi động.\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.6-prepare-metric-for-predictive-scaling/",
	"title": "Chuẩn bị các metric cho Predictive scaling",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị dữ liệu cho Predictive scaling Vì Predictive scaling cần phải có một lượng dữ liệu trong vòng hơn 2 ngày để có thể đưa ra được các dự đoán vào các ngày tiếp theo, mà ở đây chúng ta lại không có các dữ liệu đó cho nên là chúng ta sẽ cần phải chuẩn bị để giải lập một môi trường\nCác bước chuẩn bị Đầu tên là chúng ta sẽ tạo một folder mới với tên là metric-preparation và chuyển vào trong thư mục này\nmkdir metric-preparation \u0026amp;\u0026amp; cd metric-preparation Sau đó là tải kịch bản để chuẩn bị các dữ liệu\ncurl -o prepare-metric-data.sh https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/prepare-metric-data.sh Sau khi tải xong thì vào trong để thay đổi phần câu lệnh trong kịch bản\nvim prepare-metric-data.sh #!/bin/bash set -e file=$1 group=$2 echo \u0026#34;=== Format metric file ===\u0026#34; echo $file echo $group l=$(jq length $file) i=0 while [ $i -lt $l ] do time=$(date -d \u0026#34;$[5*$i] minutes ago\u0026#34;) cat $file | jq --argjson i $i --arg t \u0026#34;$time\u0026#34; \u0026#39;.[$i].Timestamp |= $t\u0026#39; \u0026gt; tmp.json \u0026amp;\u0026amp; mv tmp.json $file i=$[$i+1] done echo \u0026#34;replace autoscaling group name..\u0026#34; sed -i $file -e \u0026#34;s/#ASGPLACEHOLDER#/$group/g\u0026#34; echo \u0026#34;=== Complete ===\u0026#34; Sau khi chỉnh sửa xong thì giờ chúng ta tiến hành tải các dữ liệu chưa qua xử lý, Trước tiên là metric cho các instances.\ncurl -o metric-cpu.json https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/metric-cpu.json Dữ liệu cho CPU\ncurl -o metric-cpu.json https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/workshops/efficient-and-resilient-ec2-auto-scaling/metric-cpu.json Tiến hành sửa đổi lần lượt 2 loại dữ liệu này, đầu tiên là cho CPU trước\nbash prepare-metric-data.sh metric-cpu.json FCJ-Management-ASG \u0026amp;\u0026amp; cat metric-cpu.json Instances\nbash prepare-metric-data.sh metric-instances.json FCJ-Management-ASG \u0026amp;\u0026amp; cat metric-instances.json 💡 Note\nỞ 2 lệnh ở trên đều xuất hiện tham số FCJ-Management-ASG thì nó chính là tên của Auto Scaling Group mà chúng ta sẽ tạo về sau, nên về sau thì bạn cần sẽ phải tạo ASG với cùng tên như thế. Còn không thì bạn nên thay một cái tên khác từ bây giờ.\nTải dữ liệu lên CloudWatch Trong Amazon Linux 2023, và dùng đúng AMI thì AWS CLI đã được cài đặt sẵn ở bên trong, lúc này thì chúng ta chỉ cần lấy ra để cấu hình lại các crediential là được. Nên nhớ là bạn phải có một IAM User đủ quyền để tải dữ liệu lên CloudWatch hoặc ít nhất là đủ quyền để làm bài workshop này.\nVào trang IAM, vào thông tin IAM User và ấy Access Key Id và Serect Access Key\naws configure Tiến hành cấu hình\nSau đó là tải 2 file dữ liệu mà chúng ta đã chuẩn bị trước đó lên trên CloudWatch\naws cloudwatch put-metric-data --namespace \u0026#39;FCJ Management Custom Metrics\u0026#39; --metric-data file://metric-cpu.json aws cloudwatch put-metric-data --namespace \u0026#39;FCJ Management Custom Metrics\u0026#39; --metric-data file://metric-instances.json Kiểm tra Vào trong CloudWatch để kiểm tra kết quả\nTìm CloudWatch\nClick để vào trong CloudWatch Console\nTrong giao diện Console của CloudWatch\nChọn All metrics\nChọn FCJ Management Custom Metrics\nChọn AutoScalingGroupName\nChọn tiếp 2 thông số như hình ở dưới, chờ một khoảng thời gian để nhận được kết quả.\n"
},
{
	"uri": "http://localhost:1313/vi/7-test-solutions/",
	"title": "Kiểm thử giải pháp manual scaling",
	"tags": [],
	"description": "",
	"content": "Manual Scaling Manual Scaling là một phương pháp quản lý quy mô tài nguyên theo cách thủ công trong các nhóm Auto Scaling (ASG) trên AWS. Thay vì để hệ thống tự động điều chỉnh số lượng tài nguyên dựa trên các điều kiện đã thiết lập, bạn sẽ tự quyết định khi nào cần thêm hoặc bớt số lượng instances (máy chủ ảo) trong nhóm.\nCài đặt chương trình kiểm thử Trước khi đi vào kiểm thử, thì chúng ta cần phải tải một chương trình kiểm thử để có thể giả lập được hệ thống đang chịu tải ở lưu lượng cao. Đầu tiên, vào đường dẫn này để tải chương trình kiểm thử về: https://www.paessler.com/tools/webstress\nCài đặt kiểm thử Khi tạo xong Auto Scaling Group, thì chính dịch vụ này sẽ tự động khởi tạo một EC2 Instance do chúng ta cấu hình trước đó, để có thể xem được điều này thì chúng ta có thể vào trong EC2 Console\nChọn Load Balancer Chọn tab Resource map - new Ở đây chúng ta có thể thấy được là Target Group trước đó đang có liên kết tới 2 Targets lần lượt là 2 EC2 Instances (1 là instance gốc được tạo trước đó; cái còn lại là instance được tạo từ ASG).\nKiểm thử với ứng dụng mà chúng ta đã tải trước đó.\nMở ứng dụng lên, ấn vào tab Test Type\nTest Type:\nChọn CLICKS Run until: 100000 User Simulation\nNumber Of Users: 1000 Click Delay: 1 seconds Trong tab URLs, mình sẽ cấu hình các thông tin\nName: Manual Scaling Test, ở đây thì bạn đặt là gì cũng được, bởi vì chúng ta sẽ dùng để test trong các loại scaling khác sau đó.\nURL: copy DNS của Load Balancer và dán vào.\nBắt đầu ấn Start Test\nTiến hành kiểm thử Giờ quay lại với AWS Management Console, vào trong EC2 Console\nTích chọn 2 EC2 Instance ở trong target group Ấn vào tab Monitoring và bắt đầu quan sát Trong mục này, chúng ta có 7 biểu đồ, nhưng hiện tại thì chúng ta chỉ quan tâm tới 5 biểu đồ sau:\nCPU Utilization (%): biểu đồ cho thấy lượng tài nguyên CPU mà 2 instances này đã dùng trong khoảng dưới 8% với mỗi instance.\nNetwork in (bytes): biểu đồ cho thấy dung lượng mạng đi vào 2 instances này trong khoảng dưới 2.9 triệu Megabytes với mỗi instance.\nNetwork out (bytes): biểu đồ cho thấy dung lượng mạng đi ra từ 2 instances này trong khoảng dưới 17.3 triệu Megabytes với mỗi instance.\nNetwork packets in (count): biểu đồ cho thấy số lượng các gói tin đi vào 2 instances này trong khoảng dưới 6.85 nghìn gói tin với mỗi instance.\nNetwork packets out (count): biểu đồ cho thấy số lượng các gói tin đi ra từ 2 instances này trong khoảng dưới 7.36 nghìn gói tin với mỗi instance.\nTừ giờ trở đi chúng ta sẽ đọc các biểu đồ này như vậy. Bao gồm các thông số quan trọng ở cột dọc, cột ngang và các đường vẽ. Từ đây sẽ giúp chúng ta hiểu hơn về cách Load Balancer cân bằng lưu lượng mạng tới cho các instance ở trong Target Group.\nVà nếu như mà bạn chỉ tích chọn 1 instance, thì trên biểu đồ chỉ có một đường vẽ đại diện cho instance đó. Như vậy, khi tích chọn càng nhiều trên danh sách thì sẽ càng có nhiều đường biểu diễn hơn.\nĐiều chỉnh thủ công thông số Desired capacity của ASG Giờ thì chúng ta trở lại với trang thông tin chi tiết của ASG mà chúng ta đã tạo ở trước đó. Trong phần Group details, chúng ta có thể thấy được là: Desired capacity = 1.\nGiờ chúng ta sẽ giả sử một tình huống, là đã qua giờ cao điểm nên là mình muốn tắt bớt đi một instance để tiết kiệm chi phí. Để làm được việc này thì chúng ta sẽ điều chỉnh thủ công thông số Desired capacity = 0. Ấn Edit.\nĐiều chỉnh Desired capacity và Min desired capacity về 0 và ấn Update.\nSau đó vào trong tab Activity để xem ASG đang có hoạt động gì.\n=\u0026gt; Như vậy chúng ta có thể thấy là ASG sẽ tự động hủy đi một instance theo như thông số mà nó đã được cấu hình.\nMột vài phút sau, vào lại trong trang thông tin của Load Balancer, vào tab Resource map - new thì chúng ta có thể thấy được là giờ chỉ còn có một target thôi.\nBẬT LẠI chương trình test.\nChúng ta cũng sẽ nhận được một email từ SNS\nKhi chương trình của chúng ta đang có lưu lượng truy cập lớn, thì thao tác sẽ bị chậm đi một ít. Các bạn có thể mở ứng dụng thông qua DNS của Load Balancer để kiểm thử.\nVào lại EC2 Console, chọn target còn lại, và quan sát biểu đồ.\nCó thể thấy, hiện tại thì instance đã chịu tải lưu lượng mạng vào và ra có thể nói là gấp đôi và lượng tài nguyên CPU đã dùng gần gấp 4 lần.\nKết luận Trên thực tế thì các hệ thống sẽ có các bước thực hiện phức tạp hơn, lâu hơn nên từ đó sẽ dùng nhiều tài nguyên CPU hơn.\n"
},
{
	"uri": "http://localhost:1313/vi/8-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Sau khi thực hành xong bài workshop chúng ta tiến hành bước dọn dẹp tài nguyên\nXóa Auto Scaling Group Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn Auto Scaling Groups\nChọn Auto Scaling Groups FCJ-Management-ASG\nNhấn vào nút Actions ở góc trên bên phải màn hình\nChọn Delete\nXóa Load Balancer: Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn Load Balancer\nChọn Load Balancer FCJ-Management-LB\nNhấn vào nút Actions ở góc trên bên phải màn hình\nChọn Delete load balancer\nXóa Target Group: Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn Target Group\nChọn Target Group FCJ-Management-TG\nNhấn vào nút Actions ở góc trên bên phải màn hình\nChọn Delete\nXóa Launch Template: Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn Launch Templates\nChọn Launch Templates CJ-Management-TG\nNhấn vào nút Actions ở góc trên bên phải màn hình\nChọn Delete template\nXóa AMI: Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, lướt xuống và chọn AMIs\nChọn AMI FCJ-Management-AMI\nNhấn vào nút Actions ở góc trên bên phải màn hình\nChọn Deregister AMI\nTerminate EC2 instance Ở giao diện quản lý EC2, ở thanh điều hướng bên trái, chọn Instance\nChọn FCJ-Management instance\nNhấn vào nút Instance state ở góc trên bên phải màn hình\nChọn Terminate (delete) instance\nXóa RDS Database Truy cập RDS\nTrên thanh điều hướng bên trái, chọn Databases instance\nChọn database instance fcj-management-db-instance liên quan tới bài lab.\nNhấn vào Modify.\nModify DB Instance Ở phần Modify DB Instance, chúng ta kéo xuống dưới cùng\nNhấp bỏ Enable deletion protection\nNhấn Continue\nSchedule Modifications Tiếp tục ở phần Schedule modifications\nChọn Apply immediately\nNhấn Modify DB instance\nXóa DB instance Chọn database instance fcj-management-db-instance\nNhấn vào nút Actions ở góc trên bên phải màn hình\nChọn Delete\nChọn I acknowledge that upon instance deletion, automated, including system snapshots and point-in-time recovery, will no longer be available\nĐiền delete me\nNhấn Delete\nXóa Subnet Group Chọn Subnet groups\nChọn subnet group fcj-management-subnet-group\nChọn Delete\n"
},
{
	"uri": "http://localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]